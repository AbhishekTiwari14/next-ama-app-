(1) Creating mongoose schema:  
    UserSchema=> {username, email, password, verifyCode, verifyCodeExpiry, isVerified, isAcceptingMessages, messages: [MessageSchema]} where MessageSchema=>{content, createdAt}

    src->models->User.ts:
        import mongoose from 'mongoose';

        export interface Message extends mongoose.Document {
        content: string;
        createdAt: Date;
        }

        const MessageSchema: mongoose.Schema<Message> = new mongoose.Schema({
        content: {
            type: String,
            required: true,
        },
        createdAt: {
            type: Date,
            required: true,
            default: Date.now,
        },
        });

        export interface User extends mongoose.Document {
        username: string;
        email: string;
        password: string;
        verifyCode: string;
        verifyCodeExpiry: Date; 
        isVerified: boolean;
        isAcceptingMessages: boolean;
        messages: Message[];
        }

        // Updated User schema
        const UserSchema: mongoose.Schema<User> = new mongoose.Schema({
        username: {
            type: String,
            required: [true, 'Username is required'],
            trim: true,
            unique: true,
        },
        email: {
            type: String,
            required: [true, 'Email is required'],
            unique: true,
            match: [/.+\@.+\..+/, 'Please use a valid email address'],
        },
        password: {
            type: String,
            required: [true, 'Password is required'],
        },
        verifyCode: {
            type: String,
            required: [true, 'Verify Code is required'],
        },
        verifyCodeExpiry: {
            type: Date,
            required: [true, 'Verify Code Expiry is required'],
        },
        isVerified: {
            type: Boolean,
            default: false,
        },
        isAcceptingMessages: {
            type: Boolean,
            default: true,
        },
        messages: [MessageSchema],
        });

        const UserModel =
        (mongoose.models.User as mongoose.Model<User>) ||
        mongoose.model<User>('User', UserSchema);

        export default UserModel;

(2) Creating zod validation schemas: src->schemas->
    (a) signupSchema.ts:    => {username, email, password}
        import { z } from 'zod';

            export const usernameValidation = z
            .string()
            .min(2, 'Username must be at least 2 characters')
            .max(20, 'Username must be no more than 20 characters')
            .regex(/^[a-zA-Z0-9_]+$/, 'Username must not contain special characters');

            export const signUpSchema = z.object({
            username: usernameValidation,

            email: z.string().email({ message: 'Invalid email address' }),
            password: z
                .string()
                .min(6, { message: 'Password must be at least 6 characters' }),
            });    

    (b) signinSchema.ts:    => {identifier(username or email), password}
        import { z } from 'zod'

            export const signInSchema = z.object({
            identifier: z.string(),   //email
            password: z.string(),
            });

    (c) acceptMessagesSchema.ts:    =>{acceptMessages: boolean}
        export const AcceptMessageSchema = z.object({
            acceptMessages: z.boolean(),
        }); 

    (d) messageSchema.ts:   =>{content}
        export const messageSchema = z.object({
            content: z.string().min(10, { message: 'Content must be at least 10 characters.' }).max(300, { message: 'Content must not be longer than 300 characters.' }),
        });

    (e) verifySchema.ts:    =>{code}
        export const verifySchema = z.object({
            code: z.string().length(6, 'Verification code must be 6 digits'),
        });

